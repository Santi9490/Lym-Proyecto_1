/* Robot.java */
/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;

import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot implements RobotConstants {


        private RobotWorldDec world;

        private Console sitema;

        void setWorld(RobotWorld w) {
                world = (RobotWorldDec) w;
        }


        String salida=new String();

  final public void Robot() throws ParseException {Console sistema = new Console(world);
  boolean respuesta = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEFVAR:
    case DEFPROC:{
      respuesta = validar(sistema);
      break;
      }
    case 0:
    case IF:
    case ELSE:
    case WHILE:
    case REPEAT:{
      respuesta = commandsconditional(sistema);
      break;
      }
    case JUMP:
    case WALK:
    case LEAP:
    case TURN:
    case TURNT:
    case DROP:
    case GET:
    case GRAB:
    case LETGO:
    case NOP:{
      respuesta = advancedCommands(sistema);
      break;
      }
    case MOV:
    case RIGHT:
    case PUT:
    case PICK:
    case POP:
    case GO:
    case HOP:{
      respuesta = command(sistema);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public boolean validar(Console sistema) throws ParseException {String variable;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEFVAR:{
        jj_consume_token(DEFVAR);
        defvar();
        break;
        }
      case DEFPROC:{
        jj_consume_token(DEFPROC);
        defproc(sistema);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
try {
                                 Thread.sleep(900);
                    } catch (InterruptedException e) {
                                        System.err.format("IOException: %s%n", e);
                            }

                        sistema.printOutput(salida);
                        {if ("" != null) return true;}
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEFVAR:
      case DEFPROC:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
    }
    throw new Error("Missing return statement in function");
}

  final public void defvar() throws ParseException {String variableName;
    int variableValue;
    jj_consume_token(DEFVAR);
    variableName = var();
    variableValue = num();
salida = "Command: DEFVAR " + variableName;
}

  final public void defproc(Console sistema) throws ParseException {String procedureName;
    LinkedList<String> arguments = new LinkedList<String>();
    boolean respuesta = false;
    jj_consume_token(DEFPROC);
    procedureName = var();
    jj_consume_token(40);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      var();
arguments.add(token.image);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 41:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(41);
        var();
arguments.add(token.image);
      }
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(42);
    jj_consume_token(43);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 0:
      case MOV:
      case RIGHT:
      case PUT:
      case PICK:
      case POP:
      case GO:
      case HOP:
      case JUMP:
      case WALK:
      case LEAP:
      case TURN:
      case TURNT:
      case DROP:
      case GET:
      case GRAB:
      case LETGO:
      case NOP:
      case IF:
      case ELSE:
      case WHILE:
      case REPEAT:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 0:
      case JUMP:
      case WALK:
      case LEAP:
      case TURN:
      case TURNT:
      case DROP:
      case GET:
      case GRAB:
      case LETGO:
      case NOP:{
        respuesta = advancedCommands(sistema);
        break;
        }
      case MOV:
      case RIGHT:
      case PUT:
      case PICK:
      case POP:
      case GO:
      case HOP:{
        respuesta = command(sistema);
        break;
        }
      case IF:
      case ELSE:
      case WHILE:
      case REPEAT:{
        commandsconditional(sistema);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(44);
salida = "Command: DEFPROC " + procedureName;
}

  final public boolean condition(Console sistema) throws ParseException {salida=new String();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CAN:
    case FACING:
    case NOT:{
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FACING:{
          jj_consume_token(FACING);
          facing();
          break;
          }
        case CAN:{
          jj_consume_token(CAN);
          canCommand(sistema);
          break;
          }
        case NOT:{
          jj_consume_token(NOT);
          notCondition(sistema);
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
try {
                                 Thread.sleep(900);
                    } catch (InterruptedException e) {
                                        System.err.format("IOException: %s%n", e);
                            }

                        sistema.printOutput(salida);
                        {if ("" != null) return true;}
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CAN:
        case FACING:
        case NOT:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_4;
        }
      }
      break;
      }
    case 0:{
      jj_consume_token(0);
{if ("" != null) return false;}
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public boolean facing() throws ParseException {String o;
    boolean respuesta = false;
    jj_consume_token(FACING);
    jj_consume_token(40);
    o = orientation();
    jj_consume_token(42);
if (o.equals("north")) {
          {if ("" != null) return world.facingNorth();}
          } else if (o.equals("south")) {
            {if ("" != null) return world.facingSouth();}
            } else if (o.equals("west")) {
            {if ("" != null) return world.facingWest();}
            } else {
              {if ("" != null) return world.facingEast();}
              }

        {if ("" != null) return respuesta;}
    throw new Error("Missing return statement in function");
}

  final public boolean canCommand(Console sistema) throws ParseException {boolean respuesta = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CAN:{
      jj_consume_token(CAN);
      jj_consume_token(40);
      respuesta = advancedCommands(sistema);
      break;
      }
    case 0:
    case MOV:
    case RIGHT:
    case PUT:
    case PICK:
    case POP:
    case GO:
    case HOP:{
      respuesta = command(sistema);
      jj_consume_token(42);
salida= "Command:Can";
       {if ("" != null) return respuesta;}
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public boolean notCondition(Console sistema) throws ParseException {boolean respuesta = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      respuesta = advancedCommands(sistema);
      break;
      }
    case 0:
    case MOV:
    case RIGHT:
    case PUT:
    case PICK:
    case POP:
    case GO:
    case HOP:{
      respuesta = command(sistema);
salida= "Command:Not";
        {if ("" != null) return !respuesta;}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public boolean commandsconditional(Console sistema) throws ParseException {salida=new String();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:
    case ELSE:
    case WHILE:
    case REPEAT:{
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WHILE:{
          jj_consume_token(WHILE);
          conditionwhile(sistema);
          break;
          }
        case IF:{
          jj_consume_token(IF);
          commandIf(sistema);
          break;
          }
        case ELSE:{
          jj_consume_token(ELSE);
          commandElse(sistema);
          break;
          }
        case REPEAT:{
          jj_consume_token(REPEAT);
          repeat(sistema);
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
try {
                                 Thread.sleep(900);
                    } catch (InterruptedException e) {
                                        System.err.format("IOException: %s%n", e);
                            }

                        sistema.printOutput(salida);
                        {if ("" != null) return true;}
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case ELSE:
        case WHILE:
        case REPEAT:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_5;
        }
      }
      break;
      }
    case 0:{
      jj_consume_token(0);
{if ("" != null) return false;}
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public void conditionwhile(Console sistema) throws ParseException {boolean valor = false;
  boolean bool = false;
    jj_consume_token(WHILE);
    valor = condition(sistema);
    jj_consume_token(43);
    bool = commandsconditional(sistema);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 45:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      jj_consume_token(45);
      bool = commandsconditional(sistema);
    }
    jj_consume_token(44);
if (valor) {
      while (bool) {
        if (!condition(sistema)) {
          salida = "Command: While";
          break;
        }
        if (!bool) {
          salida = "Command: While";
          break;
        }
      }
    }
}

  final public void commandIf(Console sistema) throws ParseException {boolean bool = false;
  boolean respuesta = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:{
      jj_consume_token(IF);
      respuesta = condition(sistema);
      jj_consume_token(43);
      bool = advancedCommands(sistema);
      break;
      }
    case 0:
    case MOV:
    case RIGHT:
    case PUT:
    case PICK:
    case POP:
    case GO:
    case HOP:{
      bool = command(sistema);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 0:
        case MOV:
        case RIGHT:
        case PUT:
        case PICK:
        case POP:
        case GO:
        case HOP:
        case 45:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 45:{
          jj_consume_token(45);
          bool = advancedCommands(sistema);
          break;
          }
        case 0:
        case MOV:
        case RIGHT:
        case PUT:
        case PICK:
        case POP:
        case GO:
        case HOP:{
          bool = command(sistema);
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(44);
      jj_consume_token(ELSE);
      commandElse(sistema);
if (respuesta == true)
      {
        salida =  "Command: If";

        }
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void commandElse(Console sistema) throws ParseException {boolean result = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      jj_consume_token(43);
      result = advancedCommands(sistema);
      break;
      }
    case 0:
    case MOV:
    case RIGHT:
    case PUT:
    case PICK:
    case POP:
    case GO:
    case HOP:{
      result = command(sistema);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 0:
        case MOV:
        case RIGHT:
        case PUT:
        case PICK:
        case POP:
        case GO:
        case HOP:
        case 45:{
          ;
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 45:{
          jj_consume_token(45);
          result = advancedCommands(sistema);
          break;
          }
        case 0:
        case MOV:
        case RIGHT:
        case PUT:
        case PICK:
        case POP:
        case GO:
        case HOP:{
          result = command(sistema);
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(44);
salida = "Command: Else";
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void repeat(Console sistema) throws ParseException {boolean bool = false;
                int v=0;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REPEAT:{
      jj_consume_token(REPEAT);
      v = num();
      jj_consume_token(TIMES);
      jj_consume_token(43);
      bool = advancedCommands(sistema);
      break;
      }
    case 0:
    case MOV:
    case RIGHT:
    case PUT:
    case PICK:
    case POP:
    case GO:
    case HOP:{
      bool = command(sistema);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 0:
        case MOV:
        case RIGHT:
        case PUT:
        case PICK:
        case POP:
        case GO:
        case HOP:
        case 45:{
          ;
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 45:{
          jj_consume_token(45);
          bool = advancedCommands(sistema);
          break;
          }
        case 0:
        case MOV:
        case RIGHT:
        case PUT:
        case PICK:
        case POP:
        case GO:
        case HOP:{
          bool = command(sistema);
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(44);
for (int i = 1; i <= v; i++)
        {
            salida = "Command: While";
        }
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public boolean advancedCommands(Console sistema) throws ParseException {int x, y;
    String d, o;
    salida=new String();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case JUMP:
    case WALK:
    case LEAP:
    case TURN:
    case TURNT:
    case DROP:
    case GET:
    case GRAB:
    case LETGO:
    case NOP:{
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case JUMP:{
          jj_consume_token(JUMP);
          jj_consume_token(40);
          x = num();
          jj_consume_token(41);
          y = num();
          jj_consume_token(42);
world.setPostion(x, y);
            salida = "Command: JUMP to position (" + x + "," + y + ")";
          break;
          }
        case WALK:{
          jj_consume_token(WALK);
          walk();
          break;
          }
        case LEAP:{
          jj_consume_token(LEAP);
          leap();
          break;
          }
        case TURN:{
          jj_consume_token(TURN);
          jj_consume_token(40);
          turn();
          jj_consume_token(42);
          break;
          }
        case TURNT:{
          jj_consume_token(TURNT);
          jj_consume_token(40);
          turnt();
          jj_consume_token(42);
          break;
          }
        case DROP:{
          jj_consume_token(DROP);
          jj_consume_token(40);
          drop();
          jj_consume_token(42);
          break;
          }
        case GET:{
          jj_consume_token(GET);
          jj_consume_token(40);
          get2();
          jj_consume_token(42);
          break;
          }
        case GRAB:{
          jj_consume_token(GRAB);
          jj_consume_token(40);
          grab();
          jj_consume_token(42);
          break;
          }
        case LETGO:{
          jj_consume_token(LETGO);
          jj_consume_token(40);
          letgo();
          jj_consume_token(42);
          break;
          }
        case NOP:{
          jj_consume_token(NOP);
          jj_consume_token(40);
          nop();
          jj_consume_token(42);
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
try {
                                 Thread.sleep(900);
                    } catch (InterruptedException e) {
                                        System.err.format("IOException: %s%n", e);
                            }

                        sistema.printOutput(salida);
                        {if ("" != null) return true;}
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case JUMP:
        case WALK:
        case LEAP:
        case TURN:
        case TURNT:
        case DROP:
        case GET:
        case GRAB:
        case LETGO:
        case NOP:{
          ;
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          break label_10;
        }
      }
      break;
      }
    case 0:{
      jj_consume_token(0);
{if ("" != null) return false;}
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public void walk() throws ParseException {int v;
    String d = null;
    String o = null;
    jj_consume_token(WALK);
    jj_consume_token(40);
    v = num();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 41:{
      jj_consume_token(41);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DIRECTION:{
        jj_consume_token(DIRECTION);
d = direction();
        break;
        }
      case ORIENTATION:{
        jj_consume_token(ORIENTATION);
o = orientation();
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    jj_consume_token(42);
if (d != null) {
          int orient = world.getFacing();
          if (orient ==0) {
            if (d.equals("front")) {
              world.moveForward(v, false);
            } else if (d.equals("back")) {
                world.moveVertically(v,false);
            } else if (d.equals("right")) {
              world.moveHorizontally(v,false);
            } else {
              world.moveHorizontally(-v,false);
              }
          } else if (orient ==1 ) {
            if (d.equals("front")) {
              world.moveForward(v, false);
            } else if (d.equals("back")) {
                world.moveVertically(-v,false);
            } else if (d.equals("right")) {
              world.moveHorizontally(v,false);
            } else {
              world.moveHorizontally(-v,false);
              }
            } else if (orient ==2 ) {
              if (d.equals("front")) {
                      world.moveForward(v, false);
                    } else if (d.equals("back")) {
                        world.moveHorizontally(-v, false);;
                    } else if (d.equals("right")) {
                      world.moveVertically(v, false);
                    } else {
                      world.moveVertically(-v, false);
                      }

            } else {
              if (d.equals("front")) {
                      world.moveForward(v, false);
                    } else if (d.equals("back")) {
                        world.moveHorizontally(v, false);;
                    } else if (d.equals("right")) {
                      world.moveVertically(-v, false);
                    } else {
                      world.moveVertically(v, false);
                      }

              }
           salida = "Command: WALK " + v + " steps in direction " + d;


        } else if (o != null) {
          if (o.equals("north")) {
            world.moveVertically(-v,false);
            } else if (o.equals("south")) {
            world.moveVertically(v,false);
            } else if (o.equals("east")) {
            world.moveHorizontally(v,false);
            } else {
              world.moveHorizontally(-v,false);
              }
            salida = "Command: WALK " + v + " steps facing " + o;


        } else {
            world.moveForward(v, false);
            salida = "Command: WALK " + v + " steps forward";
        }
}

  final public void leap() throws ParseException {int v;
    String d = null;
    String o = null;
    jj_consume_token(LEAP);
    jj_consume_token(40);
    v = num();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 41:{
      jj_consume_token(41);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DIRECTION:{
        jj_consume_token(DIRECTION);
d = direction();
        break;
        }
      case ORIENTATION:{
        jj_consume_token(ORIENTATION);
o = orientation();
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    jj_consume_token(42);
if (d != null) {
          if (d != null) {
          int orient = world.getFacing();
          if (orient==0) {
            if (d.equals("front")) {
              world.moveForward(v, true);
            } else if (d.equals("back")) {
                world.moveVertically(v,true);
            } else if (d.equals("right")) {
              world.moveHorizontally(v,true);
            } else {
              world.moveHorizontally(-v,true);
              }
          } else if (orient==1) {
            if (d.equals("front")) {
              world.moveForward(v, true);
            } else if (d.equals("back")) {
                world.moveVertically(-v,true);
            } else if (d.equals("right")) {
              world.moveHorizontally(v,true);
            } else {
              world.moveHorizontally(-v,true);
              }
            } else if (orient ==2) {
              if (d.equals("front")) {
                      world.moveForward(v, true);
                    } else if (d.equals("back")) {
                        world.moveHorizontally(-v, true);;
                    } else if (d.equals("right")) {
                      world.moveVertically(v, true);
                    } else {
                      world.moveVertically(-v, true);
                      }

            } else {
              if (d.equals("front")) {
                      world.moveForward(v, true);
                    } else if (d.equals("back")) {
                        world.moveHorizontally(v, true);;
                    } else if (d.equals("right")) {
                      world.moveVertically(-v, true);
                    } else {
                      world.moveVertically(v, true);
                      }

              }
         }
            salida = "Command: LEAP " + v + " steps in direction " + d;
        } else if (o != null) {
          if (d.equals("north")) {
            world.moveVertically(-v,true);
            } else if (d.equals("south")) {
            world.moveVertically(v,true);
            } else if (d.equals("east")) {
            world.moveHorizontally(v,true);
            } else {
              world.moveHorizontally(-v,true);
              }
            salida = "Command: LEAP " + v + " steps facing " + o;
        } else {
                world.moveForward(v, true);
            salida = "Command: LEAP " + v + " steps forward";
        }
}

  final public void turn() throws ParseException {String d;
    jj_consume_token(TURN);
    d = direction();
if (d.equals("right")) {
        world.turnRight();
        } else if (d.equals("left")) {
          world.turnRight();
          world.turnRight();
          world.turnRight();
          } else {
            world.turnRight();
                world.turnRight();
                world.turnRight();
                world.turnRight();
            }
      salida = "Command: TURN in direction " + d;
}

  final public void turnt() throws ParseException {String o;
    jj_consume_token(TURNT);
    o = orientation();
int orient = world.getFacing();
      if (orient==0) {
        if (o.equals("north")) {
          world.turnRight();
              world.turnRight();
              world.turnRight();
              world.turnRight();
          } else if (o.equals("south")) {
            world.turnRight();
                world.turnRight();
            } else if (o.equals("west")) {
              world.turnRight();
              }else {
                world.turnRight();
                        world.turnRight();
                        world.turnRight();
                }
        } else if (orient==1) {
          if (o.equals("north")) {
          world.turnRight();
              world.turnRight();
          } else if (o.equals("south")) {
            world.turnRight();
                world.turnRight();
                world.turnRight();
                world.turnRight();
            } else if (o.equals("west")) {
              world.turnRight();
              world.turnRight();
                  world.turnRight();
              }else {
                world.turnRight();
                }
          } else if (orient==2) {
          if (o.equals("north")) {
          world.turnRight();
              world.turnRight();
              world.turnRight();
          } else if (o.equals("south")) {
            world.turnRight();
            } else if (o.equals("west")) {
              world.turnRight();
              world.turnRight();
              }else {
                world.turnRight();
                world.turnRight();
                world.turnRight();
                world.turnRight();
                }
          } else {
            if (o.equals("north")) {
          world.turnRight();
          } else if (o.equals("south")) {
            world.turnRight();
            world.turnRight();
            world.turnRight();
            } else if (o.equals("west")) {
              world.turnRight();
              world.turnRight();
              world.turnRight();
              world.turnRight();
              }else {
                world.turnRight();
                world.turnRight();
                }
            }
        salida = "Command: TURNTO facing " + o;
}

  final public void drop() throws ParseException {int v;
    jj_consume_token(DROP);
    v = num();
world.putChips(v);
        salida = "Command: DROP " + v + " chips";
}

  final public void get2() throws ParseException {int v;
    jj_consume_token(GET);
    v = num();
world.pickChips(v);
        salida = "Command: GET " + v + " chips";
}

  final public void grab() throws ParseException {int v;
    jj_consume_token(GRAB);
    v = num();
world.grabBalloons(v);
        salida = "Command: GRAB " + v + " balloons";
}

  final public void letgo() throws ParseException {int v;
    jj_consume_token(LETGO);
    v = num();
world.putBalloons(v);
        salida = "Command: LETGO " + v + " balloons";
}

  final public void nop() throws ParseException {
    jj_consume_token(NOP);
salida = "Command: NOP";
}

//boolean command(uniandes.lym.robot.view.Console sistema) :
  final public         boolean command(Console sistema) throws ParseException {int x,y;
                salida=new String();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MOV:
    case RIGHT:
    case PUT:
    case PICK:
    case POP:
    case GO:
    case HOP:{
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RIGHT:{
          jj_consume_token(RIGHT);
          jj_consume_token(40);
          jj_consume_token(42);
world.turnRight();salida = "Command: Turnright";
          break;
          }
        case MOV:{
          jj_consume_token(MOV);
          jj_consume_token(40);
          x = num();
          jj_consume_token(42);
world.moveForward(x,false);salida = "Command: Moveforward ";
          break;
          }
        case HOP:{
          jj_consume_token(HOP);
          jj_consume_token(40);
          x = num();
          jj_consume_token(42);
world.moveForward(x,true);salida = "Command:Jumpforward ";
          break;
          }
        case GO:{
          jj_consume_token(GO);
          jj_consume_token(40);
          x = num();
          jj_consume_token(41);
          y = num();
          jj_consume_token(42);
world.setPostion(x,y);salida = "Command:GO ";
          break;
          }
        case PUT:{
          jj_consume_token(PUT);
          jj_consume_token(40);
          put();
          jj_consume_token(42);
          break;
          }
        case PICK:{
          jj_consume_token(PICK);
          jj_consume_token(40);
          get();
          jj_consume_token(42);
          break;
          }
        case POP:{
          jj_consume_token(POP);
          jj_consume_token(40);
          x = num();
          jj_consume_token(42);
world.popBalloons(x); salida = "Comando:  Pop";
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(45);
try {
                                 Thread.sleep(900);
                    } catch (InterruptedException e) {
                                        System.err.format("IOException: %s%n", e);
                            }

                        sistema.printOutput(salida);
                        {if ("" != null) return true;}
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MOV:
        case RIGHT:
        case PUT:
        case PICK:
        case POP:
        case GO:
        case HOP:{
          ;
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          break label_11;
        }
      }
      break;
      }
    case 0:{
      jj_consume_token(0);
{if ("" != null) return false;}
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public void put() throws ParseException {int f=1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHIPS:{
      jj_consume_token(CHIPS);
      jj_consume_token(41);
      f = num();
world.putChips(f); salida = "Command:  Put Chips";
      break;
      }
    case BALLOONS:{
      jj_consume_token(BALLOONS);
      jj_consume_token(41);
      f = num();
world.putBalloons(f); salida = "Command:  Put Balloons";
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void get() throws ParseException {int f=1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHIPS:{
      jj_consume_token(CHIPS);
      jj_consume_token(41);
      f = num();
world.pickChips(f);salida = "Command:  Pick chips";
      break;
      }
    case BALLOONS:{
      jj_consume_token(BALLOONS);
      jj_consume_token(41);
      f = num();
world.grabBalloons(f);salida="Command:  Pick balloons";
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */
  final public 
        int num() throws ParseException, Error {int total=1;
    jj_consume_token(NUM);
try
                        {
                                total = Integer.parseInt(token.image);
                        }
                        catch (NumberFormatException ee)
                        {
                                {if (true) throw new Error("Number out of bounds: "+token.image+" !!");}
                        }
                        {if ("" != null) return total;}
    throw new Error("Missing return statement in function");
}

  final public String direction() throws ParseException {String d;
    jj_consume_token(DIRECTION);
{if ("" != null) return token.image;}
    throw new Error("Missing return statement in function");
}

  final public String orientation() throws ParseException {String o;
    jj_consume_token(ORIENTATION);
{if ("" != null) return token.image;}
    throw new Error("Missing return statement in function");
}

  final public String var() throws ParseException {String v;
    jj_consume_token(VAR);
{if ("" != null) return token.image;}
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[37];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x3fffcfe1,0xc000,0xc000,0x0,0x0,0x3fff0fe1,0x3fff0fe1,0x80000000,0x80000000,0x80000001,0x80000fe1,0xfe1,0x3c000000,0x3c000000,0x3c000001,0x0,0xfe1,0xfe1,0x4000fe1,0xfe1,0xfe1,0x8000fe1,0xfe1,0xfe1,0x20000fe1,0x3ff0000,0x3ff0000,0x3ff0001,0x0,0x0,0x0,0x0,0xfe0,0xfe0,0xfe1,0x3000,0x3000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x200,0x80,0x0,0x0,0x3,0x3,0x3,0x0,0x2,0x0,0x0,0x0,0x2000,0x2000,0x2000,0x0,0x2000,0x2000,0x0,0x2000,0x2000,0x0,0x0,0x0,0x0,0xc,0x200,0xc,0x200,0x0,0x0,0x0,0x0,0x0,};
	}

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new RobotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new RobotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new RobotTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[46];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 37; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 46; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
